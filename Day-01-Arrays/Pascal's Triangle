func NCR(n, r){
    int res = 1;
for(int i =0; i<r; i++){
    res = res * (n - i);
    res = res / (i+1);
}
return res;


############ Coding ninjas ################

public class Solution {
    public static int[][] pascalTriangle(int N) {

       int[][] triangle = new int[N][];
        for (int i = 0; i < N; i++) {
            triangle[i] = new int[i + 1];
            triangle[i][0] = 1;  // First element in each row is 1
            for (int j = 1; j < i; j++) {
                triangle[i][j] = triangle[i - 1][j - 1] + triangle[i - 1][j];
            }
            triangle[i][i] = 1;  // Last element in each row is 1
        }
        return triangle;
    }
}

############# Leetcode #################

public class Solution {
    public static List<List<Integer>> pascalTriangle(int N) {
        // Write your code here.
        List<List<Integer>> ans = new ArrayList<>();

        for(int row = 1; row<=N; row++){
            List<Integer> tempList = new ArrayList<>();
            for(int col = 1; col <= row; col++){
                tempList.add(nCr(row -1, col -1));
            }
            ans.add(tempList);
        }
        return ans;
    }

    public static int nCr(int n, int r){
        long res = 1;
        for(int i = 0; i<r; i++){
            res = res * (n - i);
            res = res / (i +1);
        }
        return (int) res;
    }
}
