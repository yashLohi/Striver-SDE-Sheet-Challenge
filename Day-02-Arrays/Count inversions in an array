#######  Coding Ninjas ############ O(N*logN)

public class Solution {
    public static int numberOfInversions(int []arr, int n) {
        // Write your code here.
        return mergeSort(arr, 0, arr.length -1);
    }

    static int mergeSort(int[] arr, int low, int high){
        int cnt = 0;
        if(low >= high) return cnt;
        int mid = (low + high)/2;
        cnt += mergeSort(arr, low, mid);
        cnt += mergeSort(arr, mid+1, high);
        cnt += merge(arr, low, mid, high);
        return cnt;
    }


    static int merge(int[] arr, int low, int mid, int high){
        int left = low, right = mid +1;
        ArrayList<Integer> temp = new ArrayList<>();
        int cnt = 0;

        while(left <= mid && right <= high){
            if(arr[left] <= arr[right]){
                temp.add(arr[left]);
                left++;
            }
            else{
                cnt += (mid - left + 1);
                temp.add(arr[right]);
                right++;
            }
        }

        while(left <= mid){
            temp.add(arr[left]);
            left++;
        }

        while(right <= high){
            temp.add(arr[right]);
            right++;
        }

        for(int i = low; i<=high; i++){
            arr[i] = temp.get(i - low);
        }

        return cnt;
    }
}



################ BRUTE ###############

 public static int numberOfInversions(int[] a, int n) {
        // Count the number of pairs:
        int cnt = 0;
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (a[i] > a[j]) cnt++;
            }
        }
        return cnt;
    }
