####### HASHING ########### O(2N)
public static int[] findMissingRepeatingNumbers(int[] a) {
        int n = a.length; // size of the array
        int[] hash = new int[n + 1]; // hash array

        //update the hash array:
        for (int i = 0; i < n; i++) {
            hash[a[i]]++;
        }

        //Find the repeating and missing number:
        int repeating = -1, missing = -1;
        for (int i = 1; i <= n; i++) {
            if (hash[i] == 2) repeating = i;
            else if (hash[i] == 0) missing = i;

            if (repeating != -1 && missing != -1)
                break;
        }
        int[] ans = {repeating, missing};
        return ans;
    }

####### Coding Ninjas ##########

public class Solution {
    public static int[] findMissingRepeatingNumbers(int []a) {
        // Write your code here
         int n = a.length;
      int naturalSum = n*(n+1)/2;
      int actualSum=0;
      Set<Integer> set = new HashSet<>();
      int p = -1; //repeated number
      int q = 0; //missing number
      for(int num:a){
          if(set.contains(num)){
              //set already has num
              p = num; //repeated number is num
          }else{
              //set does not have num ,so its added for first time
              set.add(num);
              actualSum+=num;
          }
      }
      q = Math.abs(actualSum-naturalSum);
      return new int[]{p,q};
    }
}

#######  Brute ##########  n^2

 public static int[] findMissingRepeatingNumbers(int[] a) {
        int n = a.length; // size of the array
        int repeating = -1, missing = -1;

        //Find the repeating and missing number:
        for (int i = 1; i <= n; i++) {
            //Count the occurrences:
            int cnt = 0;
            for (int j = 0; j < n; j++) {
                if (a[j] == i) cnt++;
            }

            if (cnt == 2) repeating = i;
            else if (cnt == 0) missing = i;

            if (repeating != -1 && missing != -1)
                break;
        }
        int[] ans = {repeating, missing};
        return ans;
    }


###############  Take You Forward ##############  O(N)

Optimal Approach 1 (Using Maths): 

Optimal Approach 2 (Using XOR): 
