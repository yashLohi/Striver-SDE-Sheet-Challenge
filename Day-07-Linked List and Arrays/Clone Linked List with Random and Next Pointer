class Solution {
    public Node copyRandomList(Node head) {
        // First round;

      Node iter = head;
      Node front = head;

      while (iter != null){
          front = iter.next;

          Node copy = new Node(iter.val);

          iter.next = copy;
          copy.next = front;

          iter = front;
      }

    //   Second round;

        iter = head;
        while(iter != null){
            if(iter.random != null){
                iter.next.random = iter.random.next;
            }
            iter  = iter.next.next;

        }

        // Third round;

        iter = head;
        Node pseudoHead = new Node(0);

        Node copy = pseudoHead;

        while(iter != null){
            front = iter.next.next;

            // extract the copy 
            copy.next = iter.next;
            copy = copy.next;

            // restore the original list

            iter.next = front;

            iter = front;
        }

        return pseudoHead.next;
         
    }
}



###############  Brute ##############

static Node copyRandomList(Node head) {
    HashMap<Node,Node> hashMap=new HashMap<>();
    Node temp = head;
//first iteration for inserting deep nodes of every node in the hashmap.
    while(temp != null) {
        Node newNode = new Node(temp.val);
        hashMap.put(temp,newNode);
        temp = temp.next;
    }
    Node t = head;
//second iteration for linking next and random pointer as given question.
    while(t != null) {
        Node node = hashMap.get(t);
        node.next = (t.next != null) ? hashMap.get(t.next):null;
        node.random = (t.random != null) ? hashMap.get(t.random):null;
        t = t.next;
    }
    return hashMap.get(head);
}
